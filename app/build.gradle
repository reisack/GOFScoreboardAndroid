plugins {
    id "org.sonarqube" version "6.2.0.5505"
}

sonar {
    properties {
        property "sonar.projectKey", "reisack_GOFScoreboardAndroid"
        property "sonar.organization", "reisack"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectName", "GOFScoreboardAndroid"

        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java,src/androidTest/java"
        property "sonar.java.binaries", "build/tmp/kotlin-classes/debug,build/intermediates/javac/debug/classes"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml,build/reports/jacoco/jacocoTestDebugReport/jacocoTestDebugReport.xml"
    }
}

apply plugin: 'jacoco'

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdk = System.getenv("CI_COMPILE_SDK")?.toInteger() ?: 35
    defaultConfig {
        applicationId "rek.gofscoreboard"
        minSdkVersion 21
        targetSdkVersion System.getenv("CI_TARGET_SDK")?.toInteger() ?: 35
        versionCode 12
        versionName "1.3.7"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    sourceSets {
        test.java.srcDirs += 'src/test/java'
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            enableUnitTestCoverage = true
            enableAndroidTestCoverage = true
        }
    }
    buildFeatures{
        dataBinding = true
        viewBinding = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }
    namespace = 'rek.gofscoreboard'
}

kotlin {
    jvmToolchain(21)
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'androidx.test.ext:junit-ktx:1.2.1'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit:2.2.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'android.arch.core:core-testing:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.6.1'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
}

jacoco {
    toolVersion = "0.8.11"
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'
    dependsOn 'compileDebugKotlin'

    group = "Reporting"
    description = "Generate JaCoCo coverage reports for unit tests."

    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*'
    ]

    def buildDirFile = layout.buildDirectory.get().asFile

    def javaClasses = fileTree(
            dir: "$buildDirFile/intermediates/javac/debug/classes",
            excludes: fileFilter
    )

    def kotlinClasses = fileTree(
            dir: "$buildDirFile/tmp/kotlin-classes/debug",
            excludes: fileFilter
    )

    classDirectories.setFrom(files([javaClasses, kotlinClasses]))
    sourceDirectories.setFrom(files(['src/main/java', 'src/main/kotlin']))
    executionData.setFrom(fileTree(dir: new File(buildDirFile, "outputs/unit_test_code_coverage/debugUnitTest"), includes: [
            'testDebugUnitTest.exec'
    ]))
}

tasks.register('jacocoTestDebugReport', JacocoReport) {
    dependsOn 'connectedDebugAndroidTest'
    dependsOn 'compileDebugKotlin'

    group = "Reporting"
    description = "Generate JaCoCo coverage reports for instrumented tests."

    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*'
    ]

    def buildDirFile = layout.buildDirectory.get().asFile

    def javaClasses = fileTree(
            dir: "$buildDirFile/intermediates/javac/debug/classes",
            excludes: fileFilter
    )

    def kotlinClasses = fileTree(
            dir: "$buildDirFile/tmp/kotlin-classes/debug",
            excludes: fileFilter
    )

    classDirectories.setFrom(files([javaClasses, kotlinClasses]))
    sourceDirectories.setFrom(files(['src/main/java', 'src/main/kotlin']))
    executionData.setFrom(fileTree(dir: new File(buildDirFile, "outputs/code_coverage/debugAndroidTest/connected"), includes: [
            '**/coverage.ec'
    ]))
}

